I need help with creating DW function.  You need create function that accepts a string as a parameter and can filter by country ` common` attribute in payload.  
*	The filter should search for countries names that contains string from attributes (e.g., providing `st` as attribute I could find `Estonia`, providing `Sp` I could find `Spain`)
*	search should be case insensitive (e.g., providing `sT` should find `Estonia`). This is input JSON patload: 
 [{
        "name": {
            "common": "Uzbekistan",
            "official": "Republic of Uzbekistan",
            "nativeName": {
                "rus": {
                    "official": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
                    "common": "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"
                },
                "uzb": {
                    "official": "O'zbekiston Respublikasi",
                    "common": "O‚Äòzbekiston"
                }
            }
        },
        "tld": [
            ".uz"
        ],
        "cca2": "UZ",
        "ccn3": "860",
        "cca3": "UZB",
        "cioc": "UZB",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "UZS": {
                "name": "Uzbekistani so ªm",
                "symbol": "so'm"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "98"
            ]
        },
        "capital": [
            "Tashkent"
        ],
        "altSpellings": [
            "UZ",
            "Republic of Uzbekistan",
            "O‚Äòzbekiston Respublikasi",
            "–é–∑–±–µ–∫–∏—Å—Ç–æ–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∞—Å–∏"
        ],
        "region": "Asia",
        "subregion": "Central Asia",
        "languages": {
            "rus": "Russian",
            "uzb": "Uzbek"
        },
        "translations": {
            "ara": {
                "official": "ÿ¨ŸÖŸáŸàÿ±Ÿäÿ© ÿ£Ÿàÿ≤ÿ®ÿßŸÉÿ≥ÿ™ÿßŸÜ",
                "common": "ÿ£Ÿàÿ≤ÿ®ÿßŸÉÿ≥ÿ™ÿßŸÜ"
            },
            "bre": {
                "official": "Republik Ouzbekistan",
                "common": "Ouzbekistan"
            },
            "ces": {
                "official": "Republika Uzbekist√°n",
                "common": "Uzbekist√°n"
            },
            "cym": {
                "official": "Republic of Uzbekistan",
                "common": "Uzbekistan"
            },
            "deu": {
                "official": "Republik Usbekistan",
                "common": "Usbekistan"
            },
            "est": {
                "official": "Usbekistani Vabariik",
                "common": "Usbekistan"
            },
            "fin": {
                "official": "Uzbekistanin tasavalta",
                "common": "Uzbekistan"
            },
            "fra": {
                "official": "R√©publique d'Ouzb√©kistan",
                "common": "Ouzb√©kistan"
            },
            "hrv": {
                "official": "Republika Uzbekistan",
                "common": "Uzbekistan"
            },
            "hun": {
                "official": "√úzb√©g K√∂zt√°rsas√°g",
                "common": "√úzbegiszt√°n"
            },
            "ita": {
                "official": "Repubblica di Uzbekistan",
                "common": "Uzbekistan"
            },
            "jpn": {
                "official": "„Ç¶„Ç∫„Éô„Ç≠„Çπ„Çø„É≥ÂÖ±ÂíåÂõΩ",
                "common": "„Ç¶„Ç∫„Éô„Ç≠„Çπ„Çø„É≥"
            },
            "kor": {
                "official": "Ïö∞Ï¶àÎ≤†ÌÇ§Ïä§ÌÉÑ Í≥µÌôîÍµ≠",
                "common": "Ïö∞Ï¶àÎ≤†ÌÇ§Ïä§ÌÉÑ"
            },
            "nld": {
                "official": "Republiek Oezbekistan",
                "common": "Oezbekistan"
            },
            "per": {
                "official": "ÿ¨ŸÖŸáŸàÿ±€å ÿßÿ≤ÿ®⁄©ÿ≥ÿ™ÿßŸÜ",
                "common": "ÿßÿ≤ÿ®⁄©ÿ≥ÿ™ÿßŸÜ"
            },
            "pol": {
                "official": "Republika Uzbekistanu",
                "common": "Uzbekistan"
            },
            "por": {
                "official": "Rep√∫blica do Usbequist√£o",
                "common": "Uzbequist√£o"
            },
            "rus": {
                "official": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
                "common": "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"
            },
            "slk": {
                "official": "Uzbeck√° republika",
                "common": "Uzbekistan"
            },
            "spa": {
                "official": "Rep√∫blica de Uzbekist√°n",
                "common": "Uzbekist√°n"
            },
            "srp": {
                "official": "–†–µ–ø—É–±–ª–∏–∫–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
                "common": "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"
            },
            "swe": {
                "official": "Republiken Uzbekistan",
                "common": "Uzbekistan"
            },
            "tur": {
                "official": "√ñzbekistan Cumhuriyeti",
                "common": "√ñzbekistan"
            },
            "urd": {
                "official": "ÿ¨ŸÖ€ÅŸàÿ±€å€Å ÿßÿ≤ÿ®⁄©ÿ≥ÿ™ÿßŸÜ",
                "common": "ÿßÿ≤ÿ®⁄©ÿ≥ÿ™ÿßŸÜ"
            },
            "zho": {
                "official": "‰πåÂÖπÂà´ÂÖãÊñØÂù¶ÂÖ±ÂíåÂõΩ",
                "common": "‰πåÂÖπÂà´ÂÖãÊñØÂù¶"
            }
        },
        "latlng": [
            41.0,
            64.0
        ],
        "landlocked": true,
        "borders": [
            "AFG",
            "KAZ",
            "KGZ",
            "TJK",
            "TKM"
        ],
        "area": 447400.0,
        "demonyms": {
            "eng": {
                "f": "Uzbekistani",
                "m": "Uzbekistani"
            },
            "fra": {
                "f": "Ouzb√®ke",
                "m": "Ouzb√®ke"
            }
        },
        "flag": "üá∫üáø",
        "maps": {
            "googleMaps": "https://goo.gl/maps/AJpo6MjMx23qSWCz8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/196240"
        },
        "population": 34232050,
        "gini": {
            "2003": 35.3
        },
        "fifa": "UZB",
        "car": {
            "signs": [
                "UZ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+05:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/uz.png",
            "svg": "https://flagcdn.com/uz.svg",
            "alt": "The flag of Uzbekistan is composed of three equal horizontal bands of turquoise, white with red top and bottom edges, and green. On the hoist side of the turquoise band is a fly-side facing white crescent and twelve five-pointed white stars arranged just outside the crescent opening in three rows comprising three, four and five stars."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/uz.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/uz.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                41.32,
                69.25
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    }]
ChatGPT
Alright! You need a DataWeave (DW) function to filter the countries based on the common attribute, considering the criteria you provided.

Here's a DW function that should do this for you:

dw
Copy code
%dw 2.0
output application/json

fun filterCountriesByName(searchString: String, countries: Array<Object>): Array<Object> =
    countries filter (country) -> 
        country.name.common containsIgnoreCase searchString

---
filterCountriesByName(attrs.searchString, payload)
This function filterCountriesByName takes in a searchString and an array of country objects (the countries parameter). It then filters through the countries to find those where the common attribute contains the searchString, disregarding case.

The main script, after the function definition, demonstrates how to use this function, assuming the attribute containing your search string is named searchString and the input JSON is available in payload.

The containsIgnoreCase function in DW helps us ensure the search is case insensitive.

For testing, just replace the attrs.searchString with a sample string, like "st", and feed your JSON as the payload to see the filtered results.




User
function containsIgnoreCase not working, find another approach  
ChatGPT
Apologies for the oversight. You're right; DataWeave 2.0 doesn't have a containsIgnoreCase function natively.

We'll have to employ a workaround by converting both the search string and the country's common name to lowercase before performing the check. Here's how to do it:

dw
Copy code
%dw 2.0
output application/json

fun filterCountriesByName(searchString: String, countries: Array<Object>): Array<Object> =
    countries filter (country) -> 
        country.name.common toLower() contains (searchString toLower())

---
filterCountriesByName(attrs.searchString, payload)
This function will now convert both the search string and the country name to lowercase and then check if the country name contains the search string. This way, it should work case-insensitively.




User
not working, use mule4 documentation for creating dw function
ChatGPT
Apologies for the confusion. Let's approach this correctly using Mule 4's documentation as a reference.

In DataWeave 2.0, we can leverage the contains and toLower functions together to check for the presence of a substring in a case-insensitive manner.

Here's the revised DataWeave function:

dw
Copy code
%dw 2.0
output application/json

fun filterCountriesByName(searchString: String, countries: Array<Object>): Array<Object> =
    countries filter (country) -> 
        contains((country.name.common) toLower(), searchString toLower())

---
filterCountriesByName(attrs.searchString, payload)
In this script, we convert both the target string (country.name.common) and the substring (searchString) to lowercase using the toLower function. Then we use the contains function to check if the target string contains the substring.

This should work for your use case, and it aligns with the Mule 4 documentation's methods.